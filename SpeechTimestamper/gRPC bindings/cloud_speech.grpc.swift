//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/speech/v1p1beta1/cloud_speech.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCall: ClientCallUnary {}

fileprivate final class Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCallBase: ClientCallUnaryBase<Google_Cloud_Speech_V1p1beta1_RecognizeRequest, Google_Cloud_Speech_V1p1beta1_RecognizeResponse>, Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCall {
  override class var method: String { return "/google.cloud.speech.v1p1beta1.Speech/Recognize" }
}

internal protocol Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCall: ClientCallUnary {}

fileprivate final class Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCallBase: ClientCallUnaryBase<Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest, Google_Longrunning_Operation>, Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCall {
  override class var method: String { return "/google.cloud.speech.v1p1beta1.Speech/LongRunningRecognize" }
}

internal protocol Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse? { return try self._receive(timeout: timeout) }
}

internal extension Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCallBase: ClientCallBidirectionalStreamingBase<Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest, Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse>, Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCall {
  override class var method: String { return "/google.cloud.speech.v1p1beta1.Speech/StreamingRecognize" }
}


/// Instantiate Google_Cloud_Speech_V1p1beta1_SpeechServiceClient, then call methods of this protocol to make API calls.
internal protocol Google_Cloud_Speech_V1p1beta1_SpeechService: ServiceClient {
  /// Synchronous. Unary.
  func recognize(_ request: Google_Cloud_Speech_V1p1beta1_RecognizeRequest) throws -> Google_Cloud_Speech_V1p1beta1_RecognizeResponse
  /// Asynchronous. Unary.
  func recognize(_ request: Google_Cloud_Speech_V1p1beta1_RecognizeRequest, completion: @escaping (Google_Cloud_Speech_V1p1beta1_RecognizeResponse?, CallResult) -> Void) throws -> Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCall

  /// Synchronous. Unary.
  func longRunningRecognize(_ request: Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest) throws -> Google_Longrunning_Operation
  /// Asynchronous. Unary.
  func longRunningRecognize(_ request: Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest, completion: @escaping (Google_Longrunning_Operation?, CallResult) -> Void) throws -> Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCall

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func streamingRecognize(completion: ((CallResult) -> Void)?) throws -> Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCall

}

internal final class Google_Cloud_Speech_V1p1beta1_SpeechServiceClient: ServiceClientBase, Google_Cloud_Speech_V1p1beta1_SpeechService {
  /// Synchronous. Unary.
  internal func recognize(_ request: Google_Cloud_Speech_V1p1beta1_RecognizeRequest) throws -> Google_Cloud_Speech_V1p1beta1_RecognizeResponse {
    return try Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func recognize(_ request: Google_Cloud_Speech_V1p1beta1_RecognizeRequest, completion: @escaping (Google_Cloud_Speech_V1p1beta1_RecognizeResponse?, CallResult) -> Void) throws -> Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCall {
    return try Google_Cloud_Speech_V1p1beta1_SpeechRecognizeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func longRunningRecognize(_ request: Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest) throws -> Google_Longrunning_Operation {
    return try Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func longRunningRecognize(_ request: Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest, completion: @escaping (Google_Longrunning_Operation?, CallResult) -> Void) throws -> Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCall {
    return try Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func streamingRecognize(completion: ((CallResult) -> Void)?) throws -> Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCall {
    return try Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Google_Cloud_Speech_V1p1beta1_SpeechProvider: ServiceProvider {
  func recognize(request: Google_Cloud_Speech_V1p1beta1_RecognizeRequest, session: Google_Cloud_Speech_V1p1beta1_SpeechRecognizeSession) throws -> Google_Cloud_Speech_V1p1beta1_RecognizeResponse
  func longRunningRecognize(request: Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest, session: Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeSession) throws -> Google_Longrunning_Operation
  func streamingRecognize(session: Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSession) throws -> ServerStatus?
}

extension Google_Cloud_Speech_V1p1beta1_SpeechProvider {
  internal var serviceName: String { return "google.cloud.speech.v1p1beta1.Speech" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/google.cloud.speech.v1p1beta1.Speech/Recognize":
      return try Google_Cloud_Speech_V1p1beta1_SpeechRecognizeSessionBase(
        handler: handler,
        providerBlock: { try self.recognize(request: $0, session: $1 as! Google_Cloud_Speech_V1p1beta1_SpeechRecognizeSessionBase) })
          .run()
    case "/google.cloud.speech.v1p1beta1.Speech/LongRunningRecognize":
      return try Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeSessionBase(
        handler: handler,
        providerBlock: { try self.longRunningRecognize(request: $0, session: $1 as! Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeSessionBase) })
          .run()
    case "/google.cloud.speech.v1p1beta1.Speech/StreamingRecognize":
      return try Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSessionBase(
        handler: handler,
        providerBlock: { try self.streamingRecognize(session: $0 as! Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Google_Cloud_Speech_V1p1beta1_SpeechRecognizeSession: ServerSessionUnary {}

fileprivate final class Google_Cloud_Speech_V1p1beta1_SpeechRecognizeSessionBase: ServerSessionUnaryBase<Google_Cloud_Speech_V1p1beta1_RecognizeRequest, Google_Cloud_Speech_V1p1beta1_RecognizeResponse>, Google_Cloud_Speech_V1p1beta1_SpeechRecognizeSession {}

internal protocol Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeSession: ServerSessionUnary {}

fileprivate final class Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeSessionBase: ServerSessionUnaryBase<Google_Cloud_Speech_V1p1beta1_LongRunningRecognizeRequest, Google_Longrunning_Operation>, Google_Cloud_Speech_V1p1beta1_SpeechLongRunningRecognizeSession {}

internal protocol Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSession: ServerSessionBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest? { return try self._receive(timeout: timeout) }
}

internal extension Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSessionBase: ServerSessionBidirectionalStreamingBase<Google_Cloud_Speech_V1p1beta1_StreamingRecognizeRequest, Google_Cloud_Speech_V1p1beta1_StreamingRecognizeResponse>, Google_Cloud_Speech_V1p1beta1_SpeechStreamingRecognizeSession {}

